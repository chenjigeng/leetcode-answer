/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function (nums) {
  let sum = 0;
  for (let i of nums) {
    sum += i;
  }
  const target = sum / 2;

  const dp = [];

  for (let i = 0; i <= nums.length; i++) {
      dp[i] = [];

      for (let j = 0; j <= target; j++) {
          dp[i][j] = false;
      }
  }

  dp[0][0] = true;
  dp[1][0] = true;
  dp[1][nums[0]] = true;

  for (let i = 0; i < nums.length; i++) {
    for (let j = 1; j <= target; j++) {
        if (j < nums[i]) {
            dp[i + 1][j] = dp[i][j]
        } else {
            dp[i + 1][j] = dp[i][j] || dp[i][j - nums[i]];
        }
    }
  }

  return !!dp[nums.length][target];

};



// console.log(canPartition([1, 5, 11, 5]));
// console.log(canPartition([1, 2, 3, 5]));
// console.log(
//   canPartition([
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     100,
//     99,
//     97,
//   ])
// );
